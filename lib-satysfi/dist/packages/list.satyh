
module List
: sig
    val map : ('a -> 'b) -> 'a list -> 'b list
    val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
    val fold-left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val fold-lefti : (int -> 'a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val filter : ('a -> bool) -> 'a list -> 'a list
    val assoc : ('a -> 'a -> bool) -> 'a -> ('a * 'b) list -> 'b option
    val reverse : 'a list -> 'a list
    val fold-left-adjacent : ('a -> 'b -> 'b option -> 'b option -> 'a) -> 'a -> 'b list -> 'a
    val append : 'a list -> 'a list -> 'a list
  end
= struct
    let-rec map
      | f []        = []
      | f (x :: xs) = (f x) :: map f xs

    let mapi f xs =
      let-rec aux
        | f i []        = []
        | f i (x :: xs) = (f i x) :: aux f (i + 1) xs
      in
      aux f 0 xs

    let-rec fold-left
      | f init []        = init
      | f init (x :: xs) = fold-left f (f init x) xs

    let fold-lefti f init xs =
      let-rec aux
        | f i init []        = init
        | f i init (x :: xs) = aux f (i + 1) (f i init x) xs
      in
      aux f 0 init xs

    let-rec filter
      | _ []        = []
      | p (x :: xs) = if p x then x :: filter p xs else filter p xs

    let-rec assoc
      | _ _ []              = None
      | eq a ((x, y) :: xs) = if eq a x then Some(y) else assoc eq a xs

    let reverse lst =
      fold-left (fun acc x -> x :: acc) [] lst

    let-rec append lst1 lst2 =
      match lst1 with
      | []      -> lst2
      | x :: xs -> x :: append xs lst2

    let fold-left-adjacent f init lst =
      let-rec aux leftopt init lst =
        match lst with
        | [] ->
            init

        | head :: [] ->
            let initnew = f init head leftopt None in
            initnew

        | head :: ((right :: _) as tail) ->
            let initnew = f init head leftopt (Some(right)) in
            aux (Some(head)) initnew tail
      in
      aux None init lst

  end
